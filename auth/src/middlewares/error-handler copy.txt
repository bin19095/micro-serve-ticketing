import { Request ,Response, NextFunction } from 'express';
import { RequestValidationError } from '../errors/request-validation-error';
import { DatabaseConnectionError } from '../errors/database-connection-error';
export const errorHandler = (
    err: Error,
    req: Request,
    res: Response,
    next: NextFunction
) => {
    // console.log('Something went wrong', err.stack);
    if(err instanceof RequestValidationError){
        return res.status(err.statusCode).send({ errors:err.serializeErrors()});
    // const formattedError = Object.entries(err.errors).map(([path, message]) =>({
    //       message, 
    //       path        
    // }));
    
    // console.log('handling request validation error');
    // return res.status(400).json( {errors:formattedError});
    }
    if(err instanceof DatabaseConnectionError){
        return res.status(err.statusCode).send({errors:err.serializeErrors()});
    
        //    return res.status(500).send({errors:[
    //           {message: err.reason}
    //    ]});
}
    res.status(400).send({
                errors: [{message: 'Something went wrong'}]
    });
};
